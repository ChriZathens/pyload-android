/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pyload.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ServiceCall implements TBase<ServiceCall, ServiceCall._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ServiceCall");

  private static final TField PLUGIN_FIELD_DESC = new TField("plugin", TType.STRING, (short)1);
  private static final TField FUNC_FIELD_DESC = new TField("func", TType.STRING, (short)2);
  private static final TField ARGUMENTS_FIELD_DESC = new TField("arguments", TType.LIST, (short)3);
  private static final TField PARSE_ARGUMENTS_FIELD_DESC = new TField("parseArguments", TType.BOOL, (short)4);

  public String plugin;
  public String func;
  public List<String> arguments;
  public boolean parseArguments;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PLUGIN((short)1, "plugin"),
    FUNC((short)2, "func"),
    ARGUMENTS((short)3, "arguments"),
    PARSE_ARGUMENTS((short)4, "parseArguments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLUGIN
          return PLUGIN;
        case 2: // FUNC
          return FUNC;
        case 3: // ARGUMENTS
          return ARGUMENTS;
        case 4: // PARSE_ARGUMENTS
          return PARSE_ARGUMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARSEARGUMENTS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLUGIN, new FieldMetaData("plugin", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING        , "PluginName")));
    tmpMap.put(_Fields.FUNC, new FieldMetaData("func", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ARGUMENTS, new FieldMetaData("arguments", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.PARSE_ARGUMENTS, new FieldMetaData("parseArguments", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ServiceCall.class, metaDataMap);
  }

  public ServiceCall() {
  }

  public ServiceCall(
    String plugin,
    String func)
  {
    this();
    this.plugin = plugin;
    this.func = func;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceCall(ServiceCall other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPlugin()) {
      this.plugin = other.plugin;
    }
    if (other.isSetFunc()) {
      this.func = other.func;
    }
    if (other.isSetArguments()) {
      List<String> __this__arguments = new ArrayList<String>();
      for (String other_element : other.arguments) {
        __this__arguments.add(other_element);
      }
      this.arguments = __this__arguments;
    }
    this.parseArguments = other.parseArguments;
  }

  public ServiceCall deepCopy() {
    return new ServiceCall(this);
  }

  @Override
  public void clear() {
    this.plugin = null;
    this.func = null;
    this.arguments = null;
    setParseArgumentsIsSet(false);
    this.parseArguments = false;
  }

  public String getPlugin() {
    return this.plugin;
  }

  public ServiceCall setPlugin(String plugin) {
    this.plugin = plugin;
    return this;
  }

  public void unsetPlugin() {
    this.plugin = null;
  }

  /** Returns true if field plugin is set (has been asigned a value) and false otherwise */
  public boolean isSetPlugin() {
    return this.plugin != null;
  }

  public void setPluginIsSet(boolean value) {
    if (!value) {
      this.plugin = null;
    }
  }

  public String getFunc() {
    return this.func;
  }

  public ServiceCall setFunc(String func) {
    this.func = func;
    return this;
  }

  public void unsetFunc() {
    this.func = null;
  }

  /** Returns true if field func is set (has been asigned a value) and false otherwise */
  public boolean isSetFunc() {
    return this.func != null;
  }

  public void setFuncIsSet(boolean value) {
    if (!value) {
      this.func = null;
    }
  }

  public int getArgumentsSize() {
    return (this.arguments == null) ? 0 : this.arguments.size();
  }

  public java.util.Iterator<String> getArgumentsIterator() {
    return (this.arguments == null) ? null : this.arguments.iterator();
  }

  public void addToArguments(String elem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<String>();
    }
    this.arguments.add(elem);
  }

  public List<String> getArguments() {
    return this.arguments;
  }

  public ServiceCall setArguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public void unsetArguments() {
    this.arguments = null;
  }

  /** Returns true if field arguments is set (has been asigned a value) and false otherwise */
  public boolean isSetArguments() {
    return this.arguments != null;
  }

  public void setArgumentsIsSet(boolean value) {
    if (!value) {
      this.arguments = null;
    }
  }

  public boolean isParseArguments() {
    return this.parseArguments;
  }

  public ServiceCall setParseArguments(boolean parseArguments) {
    this.parseArguments = parseArguments;
    setParseArgumentsIsSet(true);
    return this;
  }

  public void unsetParseArguments() {
    __isset_bit_vector.clear(__PARSEARGUMENTS_ISSET_ID);
  }

  /** Returns true if field parseArguments is set (has been asigned a value) and false otherwise */
  public boolean isSetParseArguments() {
    return __isset_bit_vector.get(__PARSEARGUMENTS_ISSET_ID);
  }

  public void setParseArgumentsIsSet(boolean value) {
    __isset_bit_vector.set(__PARSEARGUMENTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLUGIN:
      if (value == null) {
        unsetPlugin();
      } else {
        setPlugin((String)value);
      }
      break;

    case FUNC:
      if (value == null) {
        unsetFunc();
      } else {
        setFunc((String)value);
      }
      break;

    case ARGUMENTS:
      if (value == null) {
        unsetArguments();
      } else {
        setArguments((List<String>)value);
      }
      break;

    case PARSE_ARGUMENTS:
      if (value == null) {
        unsetParseArguments();
      } else {
        setParseArguments((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLUGIN:
      return getPlugin();

    case FUNC:
      return getFunc();

    case ARGUMENTS:
      return getArguments();

    case PARSE_ARGUMENTS:
      return new Boolean(isParseArguments());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLUGIN:
      return isSetPlugin();
    case FUNC:
      return isSetFunc();
    case ARGUMENTS:
      return isSetArguments();
    case PARSE_ARGUMENTS:
      return isSetParseArguments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceCall)
      return this.equals((ServiceCall)that);
    return false;
  }

  public boolean equals(ServiceCall that) {
    if (that == null)
      return false;

    boolean this_present_plugin = true && this.isSetPlugin();
    boolean that_present_plugin = true && that.isSetPlugin();
    if (this_present_plugin || that_present_plugin) {
      if (!(this_present_plugin && that_present_plugin))
        return false;
      if (!this.plugin.equals(that.plugin))
        return false;
    }

    boolean this_present_func = true && this.isSetFunc();
    boolean that_present_func = true && that.isSetFunc();
    if (this_present_func || that_present_func) {
      if (!(this_present_func && that_present_func))
        return false;
      if (!this.func.equals(that.func))
        return false;
    }

    boolean this_present_arguments = true && this.isSetArguments();
    boolean that_present_arguments = true && that.isSetArguments();
    if (this_present_arguments || that_present_arguments) {
      if (!(this_present_arguments && that_present_arguments))
        return false;
      if (!this.arguments.equals(that.arguments))
        return false;
    }

    boolean this_present_parseArguments = true && this.isSetParseArguments();
    boolean that_present_parseArguments = true && that.isSetParseArguments();
    if (this_present_parseArguments || that_present_parseArguments) {
      if (!(this_present_parseArguments && that_present_parseArguments))
        return false;
      if (this.parseArguments != that.parseArguments)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServiceCall other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServiceCall typedOther = (ServiceCall)other;

    lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(typedOther.isSetPlugin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlugin()) {
      lastComparison = TBaseHelper.compareTo(this.plugin, typedOther.plugin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunc()).compareTo(typedOther.isSetFunc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunc()) {
      lastComparison = TBaseHelper.compareTo(this.func, typedOther.func);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArguments()).compareTo(typedOther.isSetArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArguments()) {
      lastComparison = TBaseHelper.compareTo(this.arguments, typedOther.arguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParseArguments()).compareTo(typedOther.isSetParseArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParseArguments()) {
      lastComparison = TBaseHelper.compareTo(this.parseArguments, typedOther.parseArguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PLUGIN
          if (field.type == TType.STRING) {
            this.plugin = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FUNC
          if (field.type == TType.STRING) {
            this.func = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ARGUMENTS
          if (field.type == TType.LIST) {
            {
              TList _list21 = iprot.readListBegin();
              this.arguments = new ArrayList<String>(_list21.size);
              for (int _i22 = 0; _i22 < _list21.size; ++_i22)
              {
                String _elem23;
                _elem23 = iprot.readString();
                this.arguments.add(_elem23);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PARSE_ARGUMENTS
          if (field.type == TType.BOOL) {
            this.parseArguments = iprot.readBool();
            setParseArgumentsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.plugin != null) {
      oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
      oprot.writeString(this.plugin);
      oprot.writeFieldEnd();
    }
    if (this.func != null) {
      oprot.writeFieldBegin(FUNC_FIELD_DESC);
      oprot.writeString(this.func);
      oprot.writeFieldEnd();
    }
    if (this.arguments != null) {
      if (isSetArguments()) {
        oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.arguments.size()));
          for (String _iter24 : this.arguments)
          {
            oprot.writeString(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetParseArguments()) {
      oprot.writeFieldBegin(PARSE_ARGUMENTS_FIELD_DESC);
      oprot.writeBool(this.parseArguments);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceCall(");
    boolean first = true;

    sb.append("plugin:");
    if (this.plugin == null) {
      sb.append("null");
    } else {
      sb.append(this.plugin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("func:");
    if (this.func == null) {
      sb.append("null");
    } else {
      sb.append(this.func);
    }
    first = false;
    if (isSetArguments()) {
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
    }
    if (isSetParseArguments()) {
      if (!first) sb.append(", ");
      sb.append("parseArguments:");
      sb.append(this.parseArguments);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

