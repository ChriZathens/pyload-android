/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pyload.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class OnlineStatus implements TBase<OnlineStatus, OnlineStatus._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("OnlineStatus");

  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
  private static final TField PLUGIN_FIELD_DESC = new TField("plugin", TType.STRING, (short)2);
  private static final TField PACKAGENAME_FIELD_DESC = new TField("packagename", TType.STRING, (short)3);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)4);
  private static final TField SIZE_FIELD_DESC = new TField("size", TType.I64, (short)5);

  public String name;
  public String plugin;
  public String packagename;
  /**
   * 
   * @see DownloadStatus
   */
  public DownloadStatus status;
  public long size;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NAME((short)1, "name"),
    PLUGIN((short)2, "plugin"),
    PACKAGENAME((short)3, "packagename"),
    /**
     * 
     * @see DownloadStatus
     */
    STATUS((short)4, "status"),
    SIZE((short)5, "size");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PLUGIN
          return PLUGIN;
        case 3: // PACKAGENAME
          return PACKAGENAME;
        case 4: // STATUS
          return STATUS;
        case 5: // SIZE
          return SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PLUGIN, new FieldMetaData("plugin", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING        , "PluginName")));
    tmpMap.put(_Fields.PACKAGENAME, new FieldMetaData("packagename", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new EnumMetaData(TType.ENUM, DownloadStatus.class)));
    tmpMap.put(_Fields.SIZE, new FieldMetaData("size", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(OnlineStatus.class, metaDataMap);
  }

  public OnlineStatus() {
  }

  public OnlineStatus(
    String name,
    String plugin,
    String packagename,
    DownloadStatus status,
    long size)
  {
    this();
    this.name = name;
    this.plugin = plugin;
    this.packagename = packagename;
    this.status = status;
    this.size = size;
    setSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OnlineStatus(OnlineStatus other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPlugin()) {
      this.plugin = other.plugin;
    }
    if (other.isSetPackagename()) {
      this.packagename = other.packagename;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.size = other.size;
  }

  public OnlineStatus deepCopy() {
    return new OnlineStatus(this);
  }

  
  public void clear() {
    this.name = null;
    this.plugin = null;
    this.packagename = null;
    this.status = null;
    setSizeIsSet(false);
    this.size = 0;
  }

  public String getName() {
    return this.name;
  }

  public OnlineStatus setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPlugin() {
    return this.plugin;
  }

  public OnlineStatus setPlugin(String plugin) {
    this.plugin = plugin;
    return this;
  }

  public void unsetPlugin() {
    this.plugin = null;
  }

  /** Returns true if field plugin is set (has been asigned a value) and false otherwise */
  public boolean isSetPlugin() {
    return this.plugin != null;
  }

  public void setPluginIsSet(boolean value) {
    if (!value) {
      this.plugin = null;
    }
  }

  public String getPackagename() {
    return this.packagename;
  }

  public OnlineStatus setPackagename(String packagename) {
    this.packagename = packagename;
    return this;
  }

  public void unsetPackagename() {
    this.packagename = null;
  }

  /** Returns true if field packagename is set (has been asigned a value) and false otherwise */
  public boolean isSetPackagename() {
    return this.packagename != null;
  }

  public void setPackagenameIsSet(boolean value) {
    if (!value) {
      this.packagename = null;
    }
  }

  /**
   * 
   * @see DownloadStatus
   */
  public DownloadStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see DownloadStatus
   */
  public OnlineStatus setStatus(DownloadStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public OnlineStatus setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bit_vector.clear(__SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been asigned a value) and false otherwise */
  public boolean isSetSize() {
    return __isset_bit_vector.get(__SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bit_vector.set(__SIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PLUGIN:
      if (value == null) {
        unsetPlugin();
      } else {
        setPlugin((String)value);
      }
      break;

    case PACKAGENAME:
      if (value == null) {
        unsetPackagename();
      } else {
        setPackagename((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((DownloadStatus)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PLUGIN:
      return getPlugin();

    case PACKAGENAME:
      return getPackagename();

    case STATUS:
      return getStatus();

    case SIZE:
      return new Long(getSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PLUGIN:
      return isSetPlugin();
    case PACKAGENAME:
      return isSetPackagename();
    case STATUS:
      return isSetStatus();
    case SIZE:
      return isSetSize();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OnlineStatus)
      return this.equals((OnlineStatus)that);
    return false;
  }

  public boolean equals(OnlineStatus that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_plugin = true && this.isSetPlugin();
    boolean that_present_plugin = true && that.isSetPlugin();
    if (this_present_plugin || that_present_plugin) {
      if (!(this_present_plugin && that_present_plugin))
        return false;
      if (!this.plugin.equals(that.plugin))
        return false;
    }

    boolean this_present_packagename = true && this.isSetPackagename();
    boolean that_present_packagename = true && that.isSetPackagename();
    if (this_present_packagename || that_present_packagename) {
      if (!(this_present_packagename && that_present_packagename))
        return false;
      if (!this.packagename.equals(that.packagename))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  public int compareTo(OnlineStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OnlineStatus typedOther = (OnlineStatus)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(typedOther.isSetPlugin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlugin()) {
      lastComparison = TBaseHelper.compareTo(this.plugin, typedOther.plugin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackagename()).compareTo(typedOther.isSetPackagename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackagename()) {
      lastComparison = TBaseHelper.compareTo(this.packagename, typedOther.packagename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PLUGIN
          if (field.type == TType.STRING) {
            this.plugin = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PACKAGENAME
          if (field.type == TType.STRING) {
            this.packagename = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // STATUS
          if (field.type == TType.I32) {
            this.status = DownloadStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SIZE
          if (field.type == TType.I64) {
            this.size = iprot.readI64();
            setSizeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.plugin != null) {
      oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
      oprot.writeString(this.plugin);
      oprot.writeFieldEnd();
    }
    if (this.packagename != null) {
      oprot.writeFieldBegin(PACKAGENAME_FIELD_DESC);
      oprot.writeString(this.packagename);
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SIZE_FIELD_DESC);
    oprot.writeI64(this.size);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("OnlineStatus(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plugin:");
    if (this.plugin == null) {
      sb.append("null");
    } else {
      sb.append(this.plugin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packagename:");
    if (this.packagename == null) {
      sb.append("null");
    } else {
      sb.append(this.packagename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

